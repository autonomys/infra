services:
  #  Metrics collector.
  #  It scrapes targets defined in --promscrape.config
  #  And forward them to --remoteWrite.url
  vmagent:
    container_name: vmagent
    image: victoriametrics/vmagent:v1.111.0
    depends_on:
      - "victoriametrics"
    ports:
      - 8429:8429
    volumes:
      - vmagentdata:/vmagentdata
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--promscrape.config=/etc/prometheus/prometheus.yml"
      - "--remoteWrite.url=http://victoriametrics:8428/api/v1/write"
    restart: always
    networks:
      - vm_net

  # VictoriaMetrics instance, a single process responsible for
  # storing metrics and serve read requests.
  victoriametrics:
    container_name: victoriametrics
    image: victoriametrics/victoria-metrics:v1.111.0
    ports:
      - 8428:8428
      - 8089:8089
      - 8089:8089/udp
      - 2003:2003
      - 2003:2003/udp
      - 4242:4242
    volumes:
      - vmdata:/storage
    command:
      - "--storageDataPath=/storage"
      - "--graphiteListenAddr=:2003"
      - "--opentsdbListenAddr=:4242"
      - "--httpListenAddr=:8428"
      - "--influxListenAddr=:8089"
      - "--vmalert.proxyURL=http://vmalert:8880"
      - "--httpAuth.username=${HTTP_AUTH_USERNAME}"
      - "--httpAuth.password=${HTTP_AUTH_PASSWORD}"
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.services.victoriametrics.loadbalancer.server.port=8428
      - traefik.http.routers.victoriametrics.rule=Host(`vmetrics.subspace.network`)
      - traefik.http.routers.victoriametrics.tls.certresolver=le
      - traefik.http.routers.victoriametrics.entrypoints=websecure
      - traefik.docker.network=traefik-proxy
    networks:
      - vm_net
      - traefik-proxy

  # Grafana instance configured with VictoriaMetrics as datasource
  grafanavm:
    container_name: grafanavm
    image: grafana/grafana:11.5.0
    depends_on:
      - "victoriametrics"
    ports:
      - 3300:3300
    volumes:
      - grafanadata:/var/lib/grafana
      - ./provisioning/datasources/prometheus-datasource/single.yml:/etc/grafana/provisioning/datasources/single.yml
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./../../dashboards/victoriametrics.json:/var/lib/grafana/dashboards/vm.json
      - ./../../dashboards/vmagent.json:/var/lib/grafana/dashboards/vmagent.json
      - ./../../dashboards/vmalert.json:/var/lib/grafana/dashboards/vmalert.json
      - ./grafana.ini:/etc/grafana/grafana.ini
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.services.grafanavm.loadbalancer.server.port=3300
      - traefik.http.routers.grafanavm.rule=Host(`grafana.vmetrics.subspace.network`)
      - traefik.http.routers.grafanavm.tls.certresolver=le
      - traefik.http.routers.grafanavm.entrypoints=websecure
      - traefik.docker.network=traefik-proxy
    networks:
      - vm_net
      - traefik-proxy

  # vmalert executes alerting and recording rules
  vmalert:
    container_name: vmalert
    image: victoriametrics/vmalert:v1.111.0
    depends_on:
      - "victoriametrics"
      - "alertmanager"
    ports:
      - 8880:8880
    volumes:
      - ./rules/alerts.yml:/etc/alerts/alerts.yml
      - ./rules/alerts-health.yml:/etc/alerts/alerts-health.yml
      - ./rules/alerts-vmagent.yml:/etc/alerts/alerts-vmagent.yml
      - ./rules/alerts-vmalert.yml:/etc/alerts/alerts-vmalert.yml
    command:
      - "--datasource.url=http://victoriametrics:8428/"
      - "--remoteRead.url=http://victoriametrics:8428/"
      - "--remoteWrite.url=http://vmagent:8429/"
      - "--notifier.url=http://alertmanager:9093/"
      - "--rule=/etc/alerts/*.yml"
      # display source of alerts in grafana
      - "--external.url=http://127.0.0.1:3300" #grafana outside container
      - '--external.alert.source=explore?orgId=1&left={"datasource":"VictoriaMetrics","queries":[{"expr":{{.Expr|jsonEscape|queryEscape}},"refId":"A"}],"range":{"from":"{{ .ActiveAt.UnixMilli }}","to":"now"}}'
    restart: always
    networks:
      - vm_net

  # alertmanager receives alerting notifications from vmalert
  # and distributes them according to --config.file.
  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:v0.28.0
    volumes:
      - ./alertmanager.yml:/config/alertmanager.yml
    command:
      - "--config.file=/config/alertmanager.yml"
    ports:
      - 9093:9093
    restart: always
    networks:
      - vm_net

volumes:
  vmagentdata: {}
  vmdata: {}
  grafanadata: {}

networks:
  traefik-proxy:
    external: true
  vm_net:
