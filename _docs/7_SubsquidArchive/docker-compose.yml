version: "3.7"

volumes:
  archival_node_data: {}

services:
  db:
    image: postgres:14
    restart: always
    volumes:
      - /home/ubuntu/archive/postgresql:/var/lib/postgresql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: squid-archive

  ingest:
    depends_on:
      - db
    restart: on-failure
    image: ghcr.io/autonomys/substrate-ingest:latest
    command: [
      "-e", "ws://node:9944",
      "-c", "10",
       "--prom-port", "9090",
       "--out", "postgres://postgres:postgres@db:5432/squid-archive"
    ]
    environment:
      NODE_TLS_REJECT_UNAUTHORIZED: 0
#      SQD_TRACE: "*"

  gateway:
    depends_on:
      - db
    image: subsquid/substrate-gateway:firesquid
    environment:
      RUST_LOG: "substrate_gateway=info,actix_server=info"
    command: [
       "--database-url", "postgres://postgres:postgres@db:5432/squid-archive",
       "--database-max-connections", "6", # max number of concurrent database connections
       # these parameters have to be adjusted depending on machine resources to avoid OOM
       "--scan-start-value", "20", # works as batch size but for a whole archive, default is 100
       "--scan-max-value", "20000" # upper limit for the amount of blocks, default is 100000
    ]
    ports:
      - "8888:8000"

  # Explorer service is optional.
  # It provides rich GraphQL API for querying archived data.
  # Many developers find it very useful for exploration and debugging.
  explorer:
    image: subsquid/substrate-explorer:firesquid
    environment:
      DB_TYPE: postgres
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: squid-archive
      DB_USER: postgres
      DB_PASS: postgres
    ports:
      - "4444:3000"

  node:
    image: ghcr.io/autonomys/node:gemini-3f-2023-aug-17
    volumes:
      - archival_node_data:/var/subspace:rw
    restart: unless-stopped
    command: [
      "--chain", "gemini-3f",
      "--base-path", "/var/subspace",
      "--execution", "wasm",
      "--state-pruning", "archive",
      "--blocks-pruning", "archive",
      "--listen-addr", "/ip4/0.0.0.0/tcp/30333",
      "--dsn-external-address", "/ip4/$EXTERNAL_IP/tcp/30433",
      "--rpc-cors", "all",
      "--rpc-methods", "unsafe",
      "--unsafe-rpc-external",
      "--no-private-ipv4",
      "--name", "SUBSQUID_GEMINI_3f"
    ]
    healthcheck:
      timeout: 5s
      interval: 30s
      retries: 5

  datadog:
    image: datadog/agent
    environment:
      DD_API_KEY:
      DD_DOGSTATSD_NON_LOCAL_TRAFFIC: "true"
      DD_LOGS_ENABLED: "true"
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: "true"
      DD_CONTAINER_EXCLUDE: "name:datadog-agent"
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
     - /proc/:/host/proc/:ro
     - /sys/fs/cgroup:/host/sys/fs/cgroup:ro

  pg-health-check:
    image: ghcr.io/autonomys/health-check:latest
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      PORT: 8080
      SECRET:
    command: "postgres"
    ports:
      - 8080:8080

  prom-health-check:
    image: ghcr.io/autonomys/health-check:latest
    environment:
      PROMETHEUS_HOST: http://ingest:9091
      PORT: 7070
      SECRET:
    command: "prometheus"
    ports:
      - 7070:7070
