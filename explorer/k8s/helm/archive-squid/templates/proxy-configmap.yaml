apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "archive-squid.fullname" . }}-proxy-configmap
  namespace: {{ Release.Namespace}}
  labels:
    {{- include "archive-squid.labels" . | nindent 4 }}
    app.kubernetes.io/component: "archive"
    app.kubernetes.io/part-of: "squid-archive"
    app.kubernetes.io/arch: {{.Values.arch}}
    app: {{ include "archive-squid.fullname" . }}
    app: {{ include "archive-squid.fullname" . }}-app
data:
  cors.conf: |
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';

        add_header 'Content-Security-Policy' 'upgrade-insecure-requests';

        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';

        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
    }
    if ($request_method = 'POST') {

        add_header 'Content-Security-Policy' 'upgrade-insecure-requests';

        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
    }
    if ($request_method = 'GET') {

        add_header 'Content-Security-Policy' 'upgrade-insecure-requests';

        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
    }

  proxy.conf: |-
    # HTTP 1.1 support
    proxy_http_version 1.1;
    proxy_buffering off;
    proxy_set_header Host $http_host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $proxy_connection;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
    proxy_read_timeout 10m;
    client_max_body_size 25m;
 
  nginx.conf: |
    # Increase the number of connections per worker. The default of
    # 512 causes a lot of 502 HTTP errors, and leads nginx to complain
    # that '512 worker_connections are not enough'
    #
    # We now allow 16k connections which is 1/4 of the available port space
    events {
      worker_connections  768;
    }

    http {
        # See http://nginx.org/en/docs/http/websocket.html
        map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
        }

        # Tune nginx keepalives to work with the GCP HTTP(S) Load Balancer,
        # see point 3 in this blog post for why
        # https://blog.percy.io/tuning-nginx-behind-google-cloud-platform-http-s-load-balancer-305982ddb340
        keepalive_timeout 120;
        keepalive_requests 10000;

      

        server {
            root /var/www/html;
            index index.html index.htm index.nginx-debian.html;

            server_name blockarchive.subspace.network;

            location ~* \.(?:css|js|json)$ {
                try_files $uri $uri/ @backend;
            }

            location @backend {
                proxy_pass http://127.0.0.1:4350;
            }

            location /graphql {
                proxy_buffering off;
                proxy_pass http://127.0.0.1:4350/graphql;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_http_version 1.1;
            }

            location /db-health {
                proxy_buffering off;
                proxy_pass http://127.0.0.1:8080/health;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_http_version 1.1;
            }

            location /processor-health {
                proxy_buffering off;
                proxy_pass http://127.0.0.1:7070/health;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_http_version 1.1;
            }
        }

      log_format timed '$remote_addr (forwarded for $http_x_forwarded_for) '
            ' - $remote_user [$time_local] '
            '"$request" $status $request_completion $body_bytes_sent '
            '"$http_referer" "$http_user_agent" '
            '$request_time $upstream_response_time $pipe';

      access_log /var/log/nginx/access.log timed;
      error_log /var/log/nginx/error.log warn;
    }
