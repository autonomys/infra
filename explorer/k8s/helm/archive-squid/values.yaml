# Default values for archive-squid.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/subspace/blockexplorer-processor
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

image_ingest:
  repository: ghcr.io/subspace/blockarchive-ingest
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

image_node:
  repository: ghcr.io/subspace/node
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "snapshot-DATE"


imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false

service:
  type: ClusterIP
  ports:
    - port: 80
      name: nginx
      targetPort: 80
      protocol: TCP
    - port: 5432
      name: db
      targetPort: 5432
      protocol: TCP
    - port: 8888
      name: gateway
      targetPort: 8000
      protocol: TCP
    - port: 4444
      name: explorer
      targetPort: 3000
      protocol: TCP
    - port: 8080
      name: pghealth
      targetPort: 8080
      protocol: TCP
    - port: 7070
      name: ingesthealth
      targetPort: 7070
      protocol: TCP


lb_service:
  type: LoadBalancer
  lb_ports:
    - port: 80
      name: nginx
      targetPort: 80
      protocol: TCP
    # - port: 5432
    #   name: db
    #   targetPort: 5432
    #   protocol: TCP
    - port: 8888
      name: gateway
      targetPort: 8000
      protocol: TCP
    - port: 4444
      name: explorer
      targetPort: 3000
      protocol: TCP
    - port: 8080
      name: pghealth
      targetPort: 8080
      protocol: TCP
    - port: 7070
      name: ingesthealth
      targetPort: 7070
      protocol: TCP

ingress:
  enabled: false
  className: "nginx"
  annotations: {
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # nginx.ingress.kubernetes.io/upstream-hash-by,
    # nginx.ingress.kubernetes.io/proxy-set-header: "Host $host",
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "120s",
    nginx.ingress.kubernetes.io/proxy-read-timeout: "120s",
    nginx.ingress.kubernetes.io/proxy-send-timeout: "120s",
    nginx.ingress.kubernetes.io/proxy-next-upstream: "http_504",
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "3s",
    nginx.ingress.kubernetes.io/proxy-next-upstream-tries: "3",
    nginx.ingress.kubernetes.io/proxy-request-buffering: "on",
    nginx.ingress.kubernetes.io/auth-keepalive-timeout: "120s",
    nginx.ingress.kubernetes.io/client-max-body-size: "8m",
    nginx.ingress.kubernetes.io/proxy-buffering: "on",
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4",
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k",
    nginx.ingress.kubernetes.io/proxy-max-temp-file-size: "1024m",
    nginx.ingress.kubernetes.io/proxy-http-version: "1.0",
    nginx.ingress.kubernetes.io/ssl-ciphers: "ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP",
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true",
    nginx.ingress.kubernetes.io/connection-proxy-header: "keep-alive",
    nginx.ingress.kubernetes.io/enable-cors: "true",
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS",
    nginx.ingress.kubernetes.io/cors-allow-headers: "X-Forwarded-For, X-REAL-IP",
    nginx.ingress.kubernetes.io/rewrite-target: /,
    # nginx.ingress.kubernetes.io/limit-connections: 10,
    nginx.ingress.kubernetes.io/limit-rps: "250",
    # nginx.ingress.kubernetes.io/limit-burst-multiplier:,
    # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS",
    nginx.ingress.kubernetes.io/ssl-redirect: "false",
    nginx.ingress.kubernetes.io/websocket-services: "ws-svc",
    # nginx.ingress.kubernetes.io/affinity: "cookie",
    # nginx.com/sticky-cookie-services: "serviceName=api-svc srv_id expires=1h path=/api;serviceName=explorer-svc srv_id expires=1h path=/graphql",
#    nginx.ingress.kubernetes.io/server-snippets: |
#      location / {
#        return 302 /en;
#      }      
  }

  hosts:
    - host: archive.gemini-3d.subspace.network
      path: /
      pathType: ImplementationSpecific
      # port: 80

    - host: archive.gemini-3d.subspace.network
      path: /graphql
      pathType: ImplementationSpecific
      # port: 4444

  tls:
    - secretName: acme-tls-secret
      hosts: archive.gemini-3d.subspace.network

  proxySetHeaders: {}
  # -- Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers
  addHeaders: {}
  # -- Optionally customize the pod dnsConfig.
  dnsConfig: {}
  # -- Optionally customize the pod hostname.

resources:
  requests:
    cpu: 2
    memory: 4000Mi
  limits:
    cpu: 8
    memory: 16000Mi


autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80


nodeSelector:
  archive.gemini-3d.subspace/role: archive-squid-node


tolerations:
- key: "archive.gemini-3d.subspace/role"
  operator: "Equal"
  value: "archive-squid-node"
  effect: "NoSchedule"


affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: archive.gemini-3d.subspace/role
          operator: In
          values:
          - archive-squid-node


persistence:
  enabled: true
  enableKubeWorkerClaim: true
  existingClaim: ""
  accessModes:
    - ReadWriteOnce
  size: 400G
  storageClass: ""


prometheus:
  enabled: true
  interval: 15s
