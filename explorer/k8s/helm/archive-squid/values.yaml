# Default values for archive-squid.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

administrator:
  email: "who@example.org"

namespace: archive-squid

network_name: "gemini-3h"

node_name: "archive-squid-node"

externalIP: " "

image:
  repository: subsquid/substrate-archive
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "firesquid"

image_ingest:
  repository: ghcr.io/autonomys/substrate-ingest
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

image_node:
  repository: ghcr.io/autonomys/node
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "snapshot-DATE"

image_gateway:
  repository: subsquid/substrate-gateway
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: firesquid

image_explorer:
  repository: subsquid/substrate-explorer
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: firesquid

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false

service:
  type: ClusterIP
  ports:
    - port: 5432
      name: db
      targetPort: 5432
      protocol: TCP
    - port: 8888
      name: gateway
      targetPort: 8000
      protocol: TCP
    - port: 4444
      name: explorer
      targetPort: 3000
      protocol: TCP
    - port: 9944
      name: rpc
      targetPort: 9944
      protocol: TCP
    # - port: 8000
    #   name: ingest
    #   targetPort: 8000
    #   protocol: TCP


lb_service:
  type: LoadBalancer
  lb_ports:
    - port: 8888
      name: gateway
      targetPort: 8000
      protocol: TCP
    - port: 4444
      name: explorer
      targetPort: 3000
      protocol: TCP

annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/proxy-set-header: "Host $host"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "120s"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "120s"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "120s"
    nginx.ingress.kubernetes.io/proxy-next-upstream: "http_504"
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "3s"
    nginx.ingress.kubernetes.io/proxy-next-upstream-tries: "3"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
    nginx.ingress.kubernetes.io/auth-keepalive-timeout: "120s"
    nginx.ingress.kubernetes.io/client-max-body-size: "8m"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    nginx.ingress.kubernetes.io/proxy-max-temp-file-size: "1024m"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.0"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
    nginx.ingress.kubernetes.io/connection-proxy-header: "keep-alive"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT GET, POST, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "X-Forwarded-For, X-REAL-IP"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-max-age: "3600"

ingress:
  enabled: false
  className: "nginx"

  hosts:
    - host: archive.gemini-3h.subspace.network
      path: /graphql
      pathType: ImplementationSpecific
      port: 4444

  tls:
      secretName: acme-tls-secret
      hosts: archive.gemini-3h.subspace.network
      certificate: {}
      key: {}

  proxySetHeaders: {}
  # -- Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers
  addHeaders: {}
  # -- Optionally customize the pod dnsConfig.
  dnsConfig: {}
  # -- Optionally customize the pod hostname.

resources:
  requests:
    cpu: 2
    memory: 200Mi


autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

replicaCount: 1

nodeSelector:
  archive.gemini-3h.subspace/role: archive-squid-node


tolerations:
- key: "archive.gemini-3h.subspace/role"
  operator: "Equal"
  value: "archive-squid-node"
  effect: "NoSchedule"


affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: archive.gemini-3h.subspace/role
          operator: In
          values:
          - archive-squid-node


persistence:
  enabled: true
  enableKubeWorkerClaim: true
  existingClaim: ""
  accessModes:
    - ReadWriteOnce
  size: 150Gi
  storageClass: ""

prometheus:
  enabled: true
  interval: 15s

# make sure to change this to secure password in production
postgres:
  postgresUser: postgres
  postgresPassword: postgres
  postgresDatabase: squid-archive
  postgresPort: 5432
  postgresHost: localhost
